#!/usr/bin/perl -w
#
# NAME:
# To decode ICES files containing OWS MIKE oceanographic data into more
# readable form.
#
# PURPOSE:
# NA
#
# REQUIREMENTS:
# NA
#
# INPUT:
# NA
#
# OUTPUT:
# NA
#
# NOTES:
# Only time, position, depth, temperature  and salinity is parsed properly
# at present. Some quality control is performed, eg. on reported depth
# (depths over 2500m are removed), only strict observations are accepted,
# currently not interpolation is accepted (add 13,83 and 93 to accepted
# data records to include interpolated data).
#
# BUGS:
# NA
#
# AUTHOR:
# Øystein Godøy, METNO/FOU, 09.09.2009 
#
# MODIFIED:
# NA
#
# CVS_ID:
# $Id: ices2txt,v 1.1 2010-02-11 12:12:33 steingod Exp $
#

use strict;

sub decoderecords;

my $datapath="/disk1/data/iaoos/polarfront";
my @files=(
    "Uces_48-59.dat",
    "Uces_60-69.dat",
    "Uces_70-79.dat",
    "Uces_80-89.dat",
    "Uces_90-96.dat",
    "Uces_97-98.dat",
    "M99.dat",
    "M99.dat",
    "M00.dat",
    "M01.dat",
    "M02.dat",
    "M03.dat",
    "M04.dat",
    "M05.dat",
    "M06.dat"
);
my $outputfile="ows_mike_hydrography.txt";
my $maxdepthatstation = 2500;

my($file,@fc, $record);

die "$outputfile exists already, please rename/delete before generating a
new...\n" if (-e $outputfile);

foreach $file (@files) {
    print "$datapath/$file\n";
    open(FH,"$datapath/$file") or die "Could not open $datapath/$file\n";
    @fc = <FH>;
    close(FH);

    decoderecords($outputfile,\@fc);

}

exit;
###########################################################

sub decoderecords {

    my($outputfile,$recref) = @_;
    my($recnr);
    my($record,$ismaster,$isdepth);
    my($country,$ship,$station,$lat,$lon,$declat,$declon,$quadrant);
    my($tmplat,$tmplon);
    my($year,$month,$mday,$hour,$minute);
    my($bottomdepth,$depth,$salinity,$temperature);
    my($isnegative,$ismissing);

    $ismaster = 0;
    $recnr = 0;

    open(FH,">>$outputfile") or die "Could not open $outputfile for
    writing...\n";

    foreach $record (@$recref) {
	$recnr++;
	next if ($record =~ /^ /);

	if ($record =~ /03\r$/) {
	    $ismaster = 0;
	} elsif ($record =~ /01\r$/) {
	    $ismaster = 1;
	} else {
	    warn "Can't handle this record type:\n\t$record\n";
	    next;
	}

	$country = substr($record,0,2);
	$ship = substr($record,2,2);
	$station = substr($record,4,4);
	$lat = substr($record,8,4);
	$lon = substr($record,12,5);
	if ($ismaster) {
	    $declat = substr($record,64,2);
	    $declat = 0 if ($declat =~ /\D+/);
	    $declon = substr($record,66,2);
	    $declon = 0 if ($declon =~ /\D+/);
	    $minute = substr($record,68,2);
	    $bottomdepth = -999.;
	}
	$tmplat = substr($lat,2,2)/60.+($declat/100.);
	$tmplon = substr($lon,3,2)/60.+($declon/100.);
	$declat = substr($lat,0,2)+($tmplat/100.);
	$declon = substr($lon,0,3)+($tmplon/100.);
	$lat = $declat;
	$lon = $declon;
	$quadrant = substr($record,17,1);
	$year = substr($record,18,3);
	if ($year > 500) {
	    $year += 1000;
	} else {
	    $year += 2000;
	}
	$month = substr($record,21,2);
	$mday = substr($record,23,2);
	$hour = substr($record,25,2);
	if (!$ismaster) {
	    $isdepth = substr($record,40,1);
	    unless ($isdepth =~ /p/) {
		$isdepth = "d";
	    }
	    $isnegative = 0;
	    $ismissing = 0;
	    $depth = substr($record,27,4);
	    next if ($depth =~ /\D+/); 
	    next if ($depth > $maxdepthatstation); 
	    $temperature = substr($record,31,4);
	    $isnegative = 1 if ($temperature =~ /[}|\!]/);
	    if ($temperature =~ /([a-z,A-Z,\ ]+)|(\!\!)/) {
		$temperature = -999. ;
		$ismissing = 1;
	    }
	    $temperature =~ s/[}|\!]//;
	    if (!$ismissing) {
		$temperature /= 100.;
		$temperature *= -1 if ($isnegative);
	    }
	    $ismissing = 0;
	    $salinity = substr($record,35,4);
	    if ($salinity =~ /\D+/) {
		$salinity = -999. ;
		$ismissing = 1;
	    }
	    if (!$ismissing) {
		$salinity /= 100.;
	    }
	}

	printf(FH "%04d-%02d-%02d %02d:%02d UTC %6.2f %6.2f %5d %7.2f %7.2f\n",
		$year, $month, $mday, $hour, $minute, $lat, $lon, $depth,
		$temperature, $salinity) unless ($ismaster);
    }

    close(FH);

    return;
}
